Aplicação back-end que simula alguns serviços de redes de cinemas com por exemplo:

* verificar quais cinemas há em uma determinada cidade;
* quais filmes estão em cartaz, horário das sessões dos mesmoe e onde estão passando - quais cinemas e respectiva salas;
* quais filmes são filmes de estreia;
* preço do ingresso;
* cadastrar e atualizar e/ou remover cidade, cinema, sala, sessao e filme;

Conhecimentos utilizados neste projeto:
* api e api-gateway;
* banco de dados mongoDB (CRUD, blackList e ttl de tokens, além de controle de nível de usuário);
* registro de logs com uso da biblioteca "Winston";
* verificação de dados obrigatórios e seus respectivos formatos e regras com uso da biblioteca "joi";
* criação e verificação de token com biblioteca "JWT";
* nível de acesso com método de autorização a determinadas rotas;
* realização de testes de todos as funções/métodos usando a biblioteca "jest";

Sinta-se à vontade para dar uma olhada ou usar o que foi abordado no projeto.
Para fazer funcionar, basta executar "npm install" via terminal, dentro do repositório do projeto, para instalar as dependências. Em seguida, execute-o com "nmp start" / "npm run dev".

Caso queira usar o banco já configurado com dados inseridos, então extraia os arquivos de "data.zip" onde se encontra a pasta "data" de cada serviço: cinema-catalog-services, api-gateway e movies-services. Lembrando que ao copiar para dentro de cada respectiva pasta, será necessário renomear as pastas deixando apenas com o nome "data". Por exemplo: "data movies-services" => "data".

Supracitado as informações do parágrafo anterior, é preciso lembrar de startar cada insância dos bancos, no meu caso criei uma instância de banco para cada microserviço - um na porta 27017, outro na porta 27018 e outra na porta 27019. Mas se preferir pode criar apenas um banco de dados para conter os microserviços. Então, é só criar o arquivo '.env" e passar os valores desejados para as variáveis de ambiente - use o arquivo ".env.example" para saber quais são as variáveis necessárias.

